# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10m"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "µs"), "ms", "s".
  precision = ""

  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  # logtarget = "file"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  logfile = "/var/log/telegraf/telegraf.log"

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# # Configuration for MQTT server to send metrics to
[[outputs.mqtt]]
  servers = ["filip.hlasek.org:1883"] # required.

  ## MQTT outputs send metrics to this topic format
  ##    "<topic_prefix>/<hostname>/<pluginname>/"
  ##   ex: prefix/web01.example.com/mem
  topic_prefix = "telegraf"

  ## QoS policy for messages
  ##   0 = at most once
  ##   1 = at least once
  ##   2 = exactly once
  # qos = 2

  ## username and password to connect MQTT server.
  username = "MQTT_USERNAME"
  password = "MQTT_PASSWORD"

  ## client ID, if not set a random ID is generated
  # client_id = ""

  ## Timeout for write operations. default: 5s
  # timeout = "5s"

  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## When true, metrics will be sent in one MQTT message per flush.
  ## Otherwise, metrics are written one metric per MQTT message.
  # batch = false

  ## When true, metric will have RETAIN flag set, making broker cache entries
  ## until someone actually reads it
  # retain = false

  ## Data format to output.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_OUTPUT.md
  data_format = "influx"


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Retrieves SNMP values from remote agents
[[inputs.snmp]]
  # Agent addresses to retrieve values from (the address of the printer)
  agents = ["10.0.0.50"]
  # How often measurements are made
  interval = "60m"
  ## Timeout for each request
  timeout = "10s"

  # System name (hostname)
  [[inputs.snmp.field]]
    name = "sysName"
    oid = "SNMPv2-MIB::sysName.0"
    is_tag = true

  # Device description
  [[inputs.snmp.field]]
    name = "hrDeviceDescr"
    oid = ".1.3.6.1.2.1.25.3.2.1.3.1"
    is_tag = true

  # System uptime (actually snmpd uptime)
  [[inputs.snmp.field]]
    name = "uptime"
    oid = "SNMPv2-MIB::sysUpTime.0"

  ##### Printer metrics #####
  #  Pages sent through duplexer
  [[inputs.snmp.field]]
    name = "duplex-page-count"
    oid = "HP-LASERJET-COMMON-MIB::duplex-page-count.0"
  #  Total pages printed
  [[inputs.snmp.field]]
    name = "total-engine-page-count"
    oid = "HP-LASERJET-COMMON-MIB::total-engine-page-count.0"
  #  Total color pages printed
  [[inputs.snmp.field]]
    name = "total-color-page-count"
    oid = "HP-LASERJET-COMMON-MIB::total-color-page-count.0"

  # Status of all the printer covers
  [[inputs.snmp.table]]
    name = "printer"
    inherit_tags = [ "sysName" ]

    # Cover description
    [[inputs.snmp.table.field]]
      name = "prtCoverDescription"
      oid = ".1.3.6.1.2.1.43.6.1.1.2.1"
      is_tag = true

    # Cover status
    [[inputs.snmp.table.field]]
      name = "prtCoverStatus"
      oid = ".1.3.6.1.2.1.43.6.1.1.3.1"

  # Status of the ink supply level for every cartridge
  [[inputs.snmp.table]]
    name = "printer"
    inherit_tags = [ "sysName" ]

    # Cartridge name
    [[inputs.snmp.table.field]]
      name = "prtMarkerSuppliesDescription"
      oid = ".1.3.6.1.2.1.43.11.1.1.6.1"
      is_tag = true

    # Current supply level
    [[inputs.snmp.table.field]]
      name = "prtMarkerSuppliesLevel"
      oid = ".1.3.6.1.2.1.43.11.1.1.9.1"

    # Maximum supply capacity
    [[inputs.snmp.table.field]]
      name = "prtMarkerSuppliesMaxCapacity"
      oid = ".1.3.6.1.2.1.43.11.1.1.8.1"

  ## SNMP version; can be 1, 2, or 3.
  # version = 2

  ## Agent host tag; the tag used to reference the source host
  # agent_host_tag = "agent_host"

  ## SNMP community string.
  # community = "public"

  ## Number of retries to attempt.
  # retries = 3

  ## The GETBULK max-repetitions parameter.
  # max_repetitions = 10
